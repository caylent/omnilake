from datetime import datetime, UTC as utc_tz
from enum import StrEnum
from typing import Dict, List, Optional, Set, Union
from uuid import uuid4

from da_vinci.core.orm import (
    TableClient,
    TableObject,
    TableObjectAttribute,
    TableObjectAttributeType,
    TableScanDefinition,
)

from da_vinci.core.immutable_object import ObjectBody


class LakeRequestType(StrEnum):
    INCLUSIVE = 'INCLUSIVE'
    EXCLUSIVE = 'EXCLUSIVE'


class LakeRequestStage(StrEnum):
    VALIDATING = 'VALIDATING'
    LOOKUP = 'LOOKUP'
    PROCESSING = 'PROCESSING'
    RESPONDING = 'RESPONDING'
    COMPLETED = 'COMPLETED'


class LakeRequestStatus(StrEnum):
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    PENDING = 'PENDING'
    PROCESSING = 'PROCESSING'


class LakeRequest(TableObject):
    table_name = 'lake_requests'

    description = 'Table tracking all lake requests'

    partition_key_attribute = TableObjectAttribute(
        name='lake_request_id',
        attribute_type=TableObjectAttributeType.STRING,
        description='The unique identifier for the lake request. Mathes the Job ID of the parent job processing the request',
        default=lambda: str(uuid4()),
    )

    attributes = [
        TableObjectAttribute(
            name='ai_invocation_ids',
            attribute_type=TableObjectAttributeType.STRING_LIST,
            description='The AI invocations during the lake request.',
            optional=True,
            default=[],
        ),

        TableObjectAttribute(
            name='job_id',
            attribute_type=TableObjectAttributeType.STRING,
            description='The job ID of the parent job processing the request.',
        ),

        TableObjectAttribute(
            name='job_type',
            attribute_type=TableObjectAttributeType.STRING,
            description='The job type of the parent job processing the request.',
        ),

        TableObjectAttribute(
            name='last_known_stage',
            attribute_type=TableObjectAttributeType.STRING,
            description='The stage of the response.',
            default=LakeRequestStage.VALIDATING,
        ),

        TableObjectAttribute(
            name='lookup_instructions',
            attribute_type=TableObjectAttributeType.JSON_STRING_LIST,
            description='The lookup instructions for the lake request.',
        ),

        TableObjectAttribute(
            name='processing_instructions',
            attribute_type=TableObjectAttributeType.JSON_STRING,
            description='The processing instructions for the lake request.',
        ),

        TableObjectAttribute(
            name='remaining_lookups',
            attribute_type=TableObjectAttributeType.NUMBER,
            description='The number of lookups remaining for the lake request.',
            default=0,
            optional=True,
        ),

        TableObjectAttribute(
            name='requested_on',
            attribute_type=TableObjectAttributeType.DATETIME,
            description='The date and time the lake request was made.',
            default=lambda: datetime.now(utc_tz),
        ),

        TableObjectAttribute(
            name='request_status',
            attribute_type=TableObjectAttributeType.STRING,
            description='The status of the lake request.',
            default=LakeRequestStatus.PENDING,
        ),

        TableObjectAttribute(
            name='response_config',
            attribute_type=TableObjectAttributeType.JSON_STRING,
            description='The response configuration for the lake request.',
        ),

        TableObjectAttribute(
            name='response_completed_on',
            attribute_type=TableObjectAttributeType.DATETIME,
            description='The date and time the information response was completed.',
            optional=True,
        ),

        TableObjectAttribute(
            name='response_entry_id',
            attribute_type=TableObjectAttributeType.STRING,
            description='The resulting entry generated by the lake request.',
            optional=True,
        ),

        TableObjectAttribute(
            name='response_sources',
            attribute_type=TableObjectAttributeType.STRING_SET,
            description='The original entries retrieved from during the lookup stage of the lake request.',
            optional=True,
        ),
    ]

    def __init__(self, job_id: str, job_type: str, response_config: Union[Dict, ObjectBody],
                 lookup_instructions: List[Union[Dict, ObjectBody]], processing_instructions: Union[Dict, ObjectBody],
                 ai_invocation_ids: Optional[List[str]] = None, lake_request_id: Optional[str] = None,
                 remaining_lookups: Optional[int] = 0, requested_on: Optional[datetime] = None,
                 request_status: Optional[LakeRequestStatus] = None, response_completed_on: Optional[datetime] = None,
                 response_entry_id: Optional[str] = None, response_sources: Optional[Set] = None,
                 last_known_stage: Optional[LakeRequestStage] = None):
        """
        Initialize the lake request object

        Keyword Arguments:
            ai_invocation_ids -- The AI invocations during the lake request.
            job_id -- The job ID of the parent job processing the request.
            job_type -- The job type of the parent job processing the request.
            lake_request_id -- The unique identifier for the lake request. Mathes the Job ID of the parent job processing the request.
            lookup_instructions -- The lookup instructions for the lake request.
            processing_instructions -- The processing instructions for the lake request.
            remaining_lookups -- The number of lookups remaining for the lake request.
            requested_on -- The date and time the lake request was made.
            request_status -- The status of the lake request.
            response_config -- The response configuration for the lake request.
            response_completed_on -- The date and time the information response was completed.
            response_entry_id -- The resulting entry generated by the lake request.
            response_sources -- The original entries retrieved from during the lookup stage of the lake request.
            last_known_stage -- The stage of the response.
        """
        if response_config and isinstance(response_config, ObjectBody):
            response_config = response_config.to_dict()

        if lookup_instructions and isinstance(lookup_instructions[0], ObjectBody):
            lookup_instructions = [lookup_instruction.to_dict() for lookup_instruction in lookup_instructions]

        if processing_instructions and isinstance(processing_instructions, ObjectBody):
            processing_instructions = processing_instructions.to_dict()

        super().__init__(
            ai_invocation_ids=ai_invocation_ids,
            job_id=job_id,
            job_type=job_type,
            lookup_instructions=lookup_instructions,
            lake_request_id=lake_request_id,
            processing_instructions=processing_instructions,
            remaining_lookups=remaining_lookups,
            requested_on=requested_on,
            request_status=request_status,
            response_config=response_config,
            response_completed_on=response_completed_on,
            response_entry_id=response_entry_id,
            response_sources=response_sources,
            last_known_stage=last_known_stage,
        )


class LakeRequestsScanDefinition(TableScanDefinition):
    def __init__(self):
        super().__init__(table_object_class=LakeRequest)


class LakeRequestsClient(TableClient):
    def __init__(self, app_name: Optional[str] = None, deployment_id: Optional[str] = None):
        """
        Initialize the lake requests Client

        Keyword Arguments:
            app_name -- The name of the app.
            deployment_id -- The deployment ID.
        """
        super().__init__(
            app_name=app_name,
            deployment_id=deployment_id,
            default_object_class=LakeRequest,
        )

    def add_lookup_results(self, lake_request_id: str, results: Union[List, Set]) -> int:
        """
        Add lookup results to the lake request

        Keyword arguments:
        lake_request_id -- The request ID of the compaction job context
        results -- The results of the lookup
        """
        update_expression = "ADD ResponseSources :results SET RemainingLookups = if_not_exists(RemainingLookups, :start) - :decrement"

        expression_attribute_values = {
            ':decrement': {'N': "1"},
            ':results': {'SS': list(results)},
            ':start': {'N': "0"},
        }

        response = self.client.update_item(
            TableName=self.table_endpoint_name,
            Key={
                'LakeRequestId': {'S': lake_request_id},
            },
            UpdateExpression=update_expression,
            ExpressionAttributeValues=expression_attribute_values,
            ReturnValues='UPDATED_NEW',
        )

        updated_remaining_lookups = int(response['Attributes']['RemainingLookups']['N'])
    
        return updated_remaining_lookups

    def delete(self, lake_request: LakeRequest) -> None:
        """
        Delete an lake request object from the table

        Keyword Arguments:
            lake_request -- The lake request object.
        """
        return self.delete_object(lake_request)

    def get(self, lake_request_id: str, consistent_read: Optional[bool] = False) -> Union[LakeRequest, None]:
        """
        Get an lake request by request ID

        Keyword Arguments:
            lake_request_id -- The request ID of the lake request.

        Returns:
            The lake request object.
        """
        return self.get_object(lake_request_id, consistent_read=consistent_read)

    def put(self, lake_request: LakeRequest) -> None:
        """
        Put an lake request object into the table

        Keyword Arguments:
            lake_request -- The lake request object.
        """
        return self.put_object(lake_request)