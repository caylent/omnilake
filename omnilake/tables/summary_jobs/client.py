from datetime import datetime, timedelta, UTC as utc_tz
from typing import Optional, Union

from da_vinci.core.orm import (
    TableClient,
    TableObject,
    TableObjectAttribute,
    TableObjectAttributeType,
)


class SummaryJob(TableObject):
    table_name = 'summary_jobs'

    description = 'Table tracking all summary jobs'

    partition_key_attribute = TableObjectAttribute(
        name="request_id",
        attribute_type=TableObjectAttributeType.STRING,
        description="The Information Request ID that this job is associated with.",
    )

    ttl_attribute = TableObjectAttribute(
        name="time_to_live",
        attribute_type=TableObjectAttributeType.DATETIME,
        description="The time to live for the summarization job context.",
        default=lambda: datetime.now(tz=utc_tz) + timedelta(days=7),
    )

    attributes = [
        TableObjectAttribute(
            name="created_on",
            attribute_type=TableObjectAttributeType.DATETIME,
            description="The date and time the summarization job context was created.",
            default=lambda: datetime.now(tz=utc_tz),
        ),

        TableObjectAttribute(
            name="current_run",
            attribute_type=TableObjectAttributeType.NUMBER,
            description="The current run of the summarization job context.",
            default=0,
        ),

        TableObjectAttribute(
            name="current_run_completed_resource_names",
            attribute_type=TableObjectAttributeType.STRING_SET,
            description="The names of the resources that have been completed in the current run of the summarization job context.",
            optional=True,
        ),

        TableObjectAttribute(
            name="generated_resource_names",
            attribute_type=TableObjectAttributeType.STRING_SET,
            description="The names of the resources generated by the summarization job context.",
            optional=True,
        ),

        TableObjectAttribute(
            name="parent_job_id",
            attribute_type=TableObjectAttributeType.STRING,
            description="The parent job ID of the summarization job context.",
            optional=True,
        ),

        TableObjectAttribute(
            name="parent_job_type",
            attribute_type=TableObjectAttributeType.STRING,
            description="The parent job type of the summarization job context.",
            optional=True,
        ),

        TableObjectAttribute(
            name="remaining_processes",
            attribute_type=TableObjectAttributeType.NUMBER,
            description="The number of remaining processes being executed for the summarization job context.",
            default=0,
            optional=True,
        ),
    ]


class SummaryJobsTableClient(TableClient):
    def __init__(self, app_name: Optional[str] = None, deployment_id: Optional[str] = None):
        super().__init__(
            app_name=app_name,
            default_object_class=SummaryJob,
            deployment_id=deployment_id
        )

    def add_completed_resource(self, request_id: str, resource_name: str, decrement_process: Optional[bool] = True) -> None:
        """
        Adds a completed resource to a summarization job context

        Keyword arguments:
        decrement_process -- Whether or not to decrement the remaining processes (default: {True})
        request_id -- The request ID of the summarization job context
        resource_name -- The name of the resource to add
        """
        update_expression = "ADD CurrentRunCompletedResourceNames :resource_name_set, GeneratedResourceNames :resource_name_set"

        expression_attribute_values = {
            ':resource_name_set': {'SS': [resource_name]}
        }

        if decrement_process:
            update_expression += " SET RemainingProcesses = if_not_exists(RemainingProcesses, :start) - :decrement"

            expression_attribute_values.update({
                ':decrement': {'N': "1"},
                ':start': {'N': "0"},
            })

        self.client.update_item(
            TableName=self.table_endpoint_name,
            Key={
                'RequestId': {'S': request_id},
            },
            UpdateExpression=update_expression,
            ExpressionAttributeValues=expression_attribute_values,
        )

    def get(self, request_id: str, consistent_read: Optional[bool] = False) -> Union[SummaryJob, None]:
        """
        Get a summarization job context by request ID.

        Keyword arguments:
        request_id -- The request ID of the summarization job context.
        consistent_read -- Whether or not to use consistent reads. (default: {False})
        """
        return self.get_object(partition_key_value=request_id, consistent_read=consistent_read)

    def put(self, context: SummaryJob) -> None:
        """
        Puts a summarization job context

        Keyword arguments:
        context -- The context to put
        """
        self.put_object(context)