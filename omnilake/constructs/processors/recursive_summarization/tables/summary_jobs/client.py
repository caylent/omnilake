from datetime import datetime, UTC as utc_tz
from enum import StrEnum
from typing import Dict, Optional, Set, Union
from uuid import uuid4

from da_vinci.core.orm.client import (
    TableClient,
    TableObject,
    TableObjectAttribute,
    TableObjectAttributeType,
)

from da_vinci.core.immutable_object import ObjectBody


class SummaryJobStatus(StrEnum):
    IN_PROGRESS = "IN_PROGRESS"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"


class SummaryJob(TableObject):
    table_name = 'summary_jobs'

    description = 'Table tracking all summary jobs'

    partition_key_attribute = TableObjectAttribute(
        name="summary_request_id",
        attribute_type=TableObjectAttributeType.STRING,
        description="The summary request id",
        default=lambda: str(uuid4()),
    )

    attributes = [
        TableObjectAttribute(
            name="ai_invocation_ids",
            attribute_type=TableObjectAttributeType.STRING_SET,
            description="The AI invocation ids of the summarization job context.",
            optional=True,
            default=lambda: set(),
        ),

        TableObjectAttribute(
            name="configuration",
            attribute_type=TableObjectAttributeType.JSON_STRING,
            description="The configuration of the summarization job context.",
            optional=True,
            default={},
        ),

        TableObjectAttribute(
            name="created_on",
            attribute_type=TableObjectAttributeType.DATETIME,
            description="The date and time the summarization job context was created.",
            default=lambda: datetime.now(tz=utc_tz),
        ),

        TableObjectAttribute(
            name="current_run",
            attribute_type=TableObjectAttributeType.NUMBER,
            description="The current run of the summarization job context.",
            default=0,
        ),

        TableObjectAttribute(
            name="current_run_completed_entry_ids",
            attribute_type=TableObjectAttributeType.STRING_SET,
            description="The names of the entries that have been completed in the current run of the summarization job context.",
            optional=True,
        ),

        TableObjectAttribute(
            name="execution_status",
            attribute_type=TableObjectAttributeType.STRING,
            description="The status of the summarization job context.",
            default=SummaryJobStatus.IN_PROGRESS,
        ),

        TableObjectAttribute(
            name="generated_entry_ids",
            attribute_type=TableObjectAttributeType.STRING_SET,
            description="The entry ids of the resources generated by the summarization job context.",
            optional=True,
        ),

        TableObjectAttribute(
            name="goal",
            attribute_type=TableObjectAttributeType.STRING,
            description="The goal of the summarization job context.",
        ),

        TableObjectAttribute(
            name="original_source_entry_ids",
            attribute_type=TableObjectAttributeType.STRING_SET,
            description="The entry ids of the original source resources of the summarization job context.",
        ),

        TableObjectAttribute(
            name="lake_request_id",
            attribute_type=TableObjectAttributeType.STRING,
            description="The lake request ID of the summarization job context.",
            optional=True,
        ),

        TableObjectAttribute(
            name="parent_job_id",
            attribute_type=TableObjectAttributeType.STRING,
            description="The parent job ID of the summarization job context.",
        ),

        TableObjectAttribute(
            name="parent_job_type",
            attribute_type=TableObjectAttributeType.STRING,
            description="The parent job type of the summarization job context.",
        ),

        TableObjectAttribute(
            name="remaining_processes",
            attribute_type=TableObjectAttributeType.NUMBER,
            description="The number of remaining processes being executed for the summarization job context.",
            default=0,
            optional=True,
        ),
    ]

    def __init__(self, goal: str, parent_job_id: str, parent_job_type: str, original_source_entry_ids: Set[str],
                 ai_invocation_ids: Optional[Set[str]] = None, configuration: Optional[Union[Dict, ObjectBody]] = None,
                 created_on: Optional[datetime] = None, current_run: Optional[int] = 0,
                 current_run_completed_entry_ids: Optional[set] = None, execution_status: Optional[str] = None,
                 generated_entry_ids: Optional[set] = None, lake_request_id: Optional[str] = None,
                 remaining_processes: Optional[int] = 0, summary_request_id: Optional[str] = None):
        """
        Initializes a new SummaryJob object

        Keyword arguments:
        configuration -- The configuration of the summarization job context.
        created_on -- The date and time the summarization job context was created.
        current_run -- The current run of the summarization job context.
        current_run_completed_entry_ids -- The names of the entries that have been completed in the current run of the summarization job context.
        execution_status -- The status of the summarization job context.
        generated_entry_ids -- The entry ids of the resources generated by the summarization job context.
        lake_request_id -- The lake request ID of the summarization job context.
        parent_job_id -- The parent job ID of the summarization job context.
        parent_job_type -- The parent job type of the summarization job context.
        remaining_processes -- The number of remaining processes being executed for the summarization job context.
        summary_request_id -- The summary request id
        """
        super().__init__(
            ai_invocation_ids=ai_invocation_ids,
            configuration=configuration,
            created_on=created_on,
            current_run=current_run,
            current_run_completed_entry_ids=current_run_completed_entry_ids,
            execution_status=execution_status,
            generated_entry_ids=generated_entry_ids,
            goal=goal,
            original_source_entry_ids=original_source_entry_ids,
            lake_request_id=lake_request_id,
            parent_job_id=parent_job_id,
            parent_job_type=parent_job_type,
            remaining_processes=remaining_processes,
            summary_request_id=summary_request_id,
        )


class SummaryJobsTableClient(TableClient):
    def __init__(self, app_name: Optional[str] = None, deployment_id: Optional[str] = None):
        super().__init__(
            app_name=app_name,
            default_object_class=SummaryJob,
            deployment_id=deployment_id
        )

    def add_ai_invocation(self, summary_request_id: str, ai_invocation_id: str) -> None:
        """
        Adds an AI invocation to a summarization job context

        Keyword arguments:
        summary_request_id -- The request ID of the summarization job context
        ai_invocation -- The AI invocation to add
        """
        update_expression = "ADD AIInvocationIds :results"

        expression_attribute_values = {
            ':results': {'SS': [ai_invocation_id]},
        }

        self.client.update_item(
            TableName=self.table_endpoint_name,
            Key={
                'SummaryRequestId': {'S': summary_request_id},
            },
            UpdateExpression=update_expression,
            ExpressionAttributeValues=expression_attribute_values,
        )

    def add_completed_entry(self, entry_id: str, summary_request_id: str, decrement_process: Optional[bool] = True) -> SummaryJob:
        """
        Adds a completed entry to a summarization job context

        Keyword arguments:
        entry_id -- The entry ID of the resource to add
        summary_request_id -- The request ID of the summarization job context
        decrement_process -- Whether or not to decrement the remaining processes (default: {True})
        """
        update_expression = "ADD CurrentRunCompletedEntryIds :entry_id_set, GeneratedEntryIds :entry_id_set"

        expression_attribute_values = {
            ':entry_id_set': {'SS': [entry_id]}
        }

        if decrement_process:
            update_expression += " SET RemainingProcesses = if_not_exists(RemainingProcesses, :start) - :decrement"

            expression_attribute_values.update({
                ':decrement': {'N': "1"},
                ':start': {'N': "0"},
            })

        response = self.client.update_item(
            TableName=self.table_endpoint_name,
            Key={
                'SummaryRequestId': {'S': summary_request_id},
            },
            UpdateExpression=update_expression,
            ExpressionAttributeValues=expression_attribute_values,
            ReturnValues='ALL_NEW',
        )

        return SummaryJob.from_dynamodb_item(response['Attributes'])

    def get(self, summary_request_id: str, consistent_read: Optional[bool] = False) -> Union[SummaryJob, None]:
        """
        Get a summarization job context by request ID.

        Keyword arguments:
        summary_request_id -- The request ID of the summarization job context.
        consistent_read -- Whether or not to use consistent reads. (default: {False})
        """
        return self.get_object(partition_key_value=summary_request_id, consistent_read=consistent_read)

    def put(self, context: SummaryJob) -> None:
        """
        Puts a summarization job context

        Keyword arguments:
        context -- The context to put
        """
        self.put_object(context)